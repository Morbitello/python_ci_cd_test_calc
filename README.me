Let's create a simple GitLab CI pipeline that runs unit tests for a basic Python calculator application.
Example Overview:

    We'll write a simple calculator Python class with basic operations (addition, subtraction, multiplication, division).
    We will write unit tests for the calculator.
    We will set up a GitLab CI pipeline to run the tests automatically when code is pushed to the repository.

1. Create the Calculator Code

Let's start by creating a simple calculator.py file that defines a class with basic mathematical operations.
calculator.py

# calculator.py

class Calculator:
    def add(self, a, b):
        return a + b

    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        return a * b

    def divide(self, a, b):
        if b == 0:
            raise ValueError("Cannot divide by zero")
        return a / b

2. Create Unit Tests for the Calculator

Now, let's create a test file test_calculator.py that tests the methods of the Calculator class.
test_calculator.py

# test_calculator.py
import pytest
from calculator import Calculator

# Create an instance of the Calculator class
calc = Calculator()

def test_add():
    assert calc.add(1, 2) == 3

def test_subtract():
    assert calc.subtract(5, 3) == 2

def test_multiply():
    assert calc.multiply(2, 3) == 6

def test_divide():
    assert calc.divide(6, 2) == 3

def test_divide_by_zero():
    with pytest.raises(ValueError):
        calc.divide(1, 0)

Explanation of the Tests:

    test_add: Tests the add method of the Calculator class.
    test_subtract: Tests the subtract method.
    test_multiply: Tests the multiply method.
    test_divide: Tests the divide method for valid input.
    test_divide_by_zero: Tests that dividing by zero raises a ValueError.

3. Create the requirements.txt File

We need to list the necessary dependencies for our project. For this example, we'll include pytest for running the tests.
requirements.txt

pytest==6.0

4. Create the .gitlab-ci.yml File

This is the GitLab CI configuration file, which tells GitLab how to set up the environment and run the tests.
.gitlab-ci.yml

# Define the stages of the pipeline
stages:
  - test  # We only have a 'test' stage for now

# Cache Python dependencies to speed up future builds
cache:
  paths:
    - venv/
    - ~/.cache/pip/

# Test job
test:
  image: python:3.9  # Use Python 3.9 Docker image
  stage: test  # This job runs in the 'test' stage
  before_script:
    - python -m venv venv  # Create a virtual environment
    - source venv/bin/activate  # Activate the virtual environment
    - pip install --upgrade pip  # Upgrade pip to the latest version
    - pip install -r requirements.txt  # Install dependencies from requirements.txt
  script:
    - pytest  # Run the tests using pytest
  artifacts:
    paths:
      - pytest-report.xml  # Save the test results
    expire_in: 1 hour  # Keep the artifact for 1 hour

Explanation of the .gitlab-ci.yml file:

    stages: Defines the pipeline stages. We only have one stage (test) to run unit tests.
    cache: Caches the virtual environment and pip cache to speed up subsequent builds.
    test job:
        image: Uses the official python:3.9 Docker image for the job.
        before_script: Runs setup commands to create a virtual environment, activate it, and install dependencies.
        script: Runs pytest to execute the unit tests.
        artifacts: Saves the test results as an artifact (pytest-report.xml), which will be available in the GitLab UI for download.
    expire_in: The artifact will be kept for 1 hour.

5. Push Changes to GitLab

Once the files are set up, commit and push them to your GitLab repository.

git add .gitlab-ci.yml requirements.txt calculator.py test_calculator.py
git commit -m "Add GitLab CI pipeline for Python calculator unit tests"
git push origin main

6. Pipeline Execution in GitLab

    GitLab will automatically trigger the pipeline once you push the changes.
    The pipeline will:
        Set up a virtual environment.
        Install the dependencies from requirements.txt.
        Run the tests using pytest.
    If the tests pass, the pipeline will be marked as successful.
    If any tests fail, GitLab will display the failure details in the pipeline logs.

7. Viewing Test Results

    After the pipeline completes, you can see the test results in the GitLab UI.
    You can also download the test artifacts (e.g., pytest-report.xml) to view the results in detail.

Summary:

This setup demonstrates how to:

    Write a simple Python calculator class with basic operations.
    Write unit tests for the calculator using pytest.
    Set up a GitLab CI pipeline to automatically run the tests whenever you push changes to the repository.

This pipeline is a good starting point for Python projects, and you can extend it further as needed, such as adding linting, building, or deployment stages. Let me know if you need any adjustments or additional features!
